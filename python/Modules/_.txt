https://wiki.python.org/moin/UsefulModules
https://docs.python.org/3/library/

Modules:
	from <module> import *: 	imports everything from the module
	dir(<module>):			list out contents of module
	
Virtual Envirionments:
	python -m venv myenv		# create environment		
	myenv\Scripts\activate		# activate environtment
	deactivate			# deactivate environment
	rm -rf myenv			# delete myenv directory
	pip freeze > requirements.txt	
	pip install -r requirements

	alternatives: pipenv, virtualenv, poetry

	bin/, Scripts/		contain executables for virtual env like python interpreter, pip
	include/		C headers specific to Python version for interpreter useful when compiling C extensions
	lib/, Lib/		standard library files, installed packages
		site-packages/	where third party packages are installed
	pyvenv.cfg		metadata

pip [command] [options]				pip- Preferred Installer Program
	commands: 
		install 
			-r, --requirement <file>	# install from requirements file
			-e, --editable <path/url>	# install project in editable mode	
			-U, --upgrade <package_name>	
			--no-deps <package_name>	# not install package dependencies
			--user <package_name>		# install to user site packages directory
			--target=<dir>	<package>	# to specific directory
			--timeout=<sec> <package>
			--compile <package>		# source to byte code
		uninstall
			-y, --yes <package>		# auto confirm uninstallation
		list
			-o, --outdated
			-u, --uptodate
			--format=<format>		# `columns`, `freeze`, `json`
			--not-required			# not dependencies of other packages
		show
			-f, -files <package>		# list of files for package
		freeze
			-r, --requirement <file>	# use given requirements file
			--all				# don't skip any package
		search
			-d, dest <dir> <package>	# download to directory
		check
		wheel
		help
			
python [flags] [scipt] [arguments]
	-c <command>			# execute python command from cli
	-m <module>			# runs library module as a script -> python -m http.server 8000
	-i <script>			# opens interactive interpreter after running script	-> python -i myscript.py (interactive debugging)
	-O, -OO <script>		# optimize generated bytecode, remove assert / doc strings
	-B <script>			# prevents creation of __pycache__ files
	-q 				# suppresses output of python startup messages
	-v, -vv <script>		# increse verbosity useful for debugging
	-V, --version			# python version
	-W <arg>			# `ignore` (warnings), `default` (show once per occurance), `error` (warning -> error) -> python -W ignore myscript.py
	-S <script>			# prevent auto imprt of `site` module
	-h, --help				








